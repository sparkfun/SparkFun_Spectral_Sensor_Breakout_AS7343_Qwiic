{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"arduino_examples/","title":"Arduino Examples","text":"<p>Let's take a closer look at the examples included in the SparkFun AS7343 Arduino Library. This section assumes users are following the assembly instructions from the Hardware Assembly/Qwiic Start sections and are using a SparkFun RedBoard IoT - ESP32.</p>"},{"location":"arduino_examples/#example-1-basic-readings","title":"Example 1 - Basic Readings","text":"<p>The first example sets up the AS7343 to operate with default settings and outputs data from just four channels (Red, Green, Blue and NIR). Open the example in Arduino by navigating to File &gt; Examples &gt; SparkFun AS7343 Arduino Library &gt; Example_01_BasicReadings. Next, select your board (RedBoard IoT - ESP32) and Port and click the \"Upload\" button. After the code finishes compiling and uploading, open the serial monitor with the baud set to 115200 and you should see readings for red, blue, green and NIR print out like the screenshot below shows:</p> <p></p>"},{"location":"arduino_examples/#example-2-all-channels","title":"Example 2 - All Channels","text":"<p>Example 2 - All Channels shows how to set up the AS7343 with default settings to print out all spectral data from the sensor. This example is nearly identical to the first outside of the serial data printed out. Instead of getting and printing data from four specific channels, this example requests data from all channels and prints it as comma separated values. Open the example in Arduino by navigating to File &gt; Examples &gt; SparkFun AS7343 Arduino Library &gt; Example_02_AllChannels. </p> <p>In order to get data from all channels, the AS7343 takes measurements in three cycles with each one stepping through four individual channels combined with readings from the Clear/VIS and Flicker Detect/FD which is then stored in the sensor's data registers. The example prints out spectral data stepping through each channel from 0 to 17 in comma-separated values:</p> <pre><code>    for (int channel = 0; channel &lt; channelsRead; channel++)\n    {\n        Serial.print(myData[channel]);\n        Serial.print(\",\");\n    }\n\n    Serial.println();\n</code></pre>"},{"location":"arduino_examples/#example-3-gain","title":"Example 3 - Gain","text":"<p>The third example shows how to set up the AS7343 with specific Spectral Engines Gain Settigns (aka AGAIN) and cycle through the gain settings using serial commands. Open the example in Arduino by navigating to File &gt; Examples &gt; SparkFun AS7343 Arduino Library &gt; Example_03_Gain. If necessary, select your board and port and click the \"Upload\" button. Open the serial terminal with the baud set to 115200 after the code finishes uploading. </p> <p>The example accepts serial inputs of \"+\" and \"-\" to step up and down, respectively, through the available gain settings and prints out the value of the gain each time it's updated:</p> <pre><code>    if(Serial.available())\n    {\n        userInput = Serial.read();\n        if (userInput == '+' || userInput == '-')\n        {\n            updateGainSetting(userInput);\n        }\n    }\n</code></pre> <p>The code also prints out spectral readings from all channels every 1 second so'll want to pay close attention to the serial monitor when adjusting the gain value to see the returned serial data like the screenshot below shows:</p> <p></p>"},{"location":"arduino_examples/#example-4-interrupt","title":"Example 4 - Interrupt","text":"<p>The fourth example demonstrates how to set up the AS7343's interrupt pin to fire when values from a specific channel exceed a specified limit. The example defaults to watch channel FZ (450nm aka Blue) and trigger the interrupt when it reports values over 10 counts. The example defaults to use <code>D4</code> for the interrupt pin so depending on whether or not your board supports external interrupts adjust this line if needed:</p> <pre><code>#define INT_HW_READ_PIN 4 // Pin to read the interrupt pin from the AS7343\n</code></pre> <p>Not sure which pins on your development board support the <code>attachInterrupt()</code> function in Arduino? Take a look at this page for a more thorough reference on the function along with available interrupt pins for common Arduino development boards.</p>"},{"location":"arduino_examples/#example-5-flicker-detection","title":"Example 5 - Flicker Detection","text":"<p>Example five shows how to set up and monitor flicker detection readings from the sensor. It sets up the AS7343 with default settings with flicker detection enabled. It then checks to see if flicker detection values are invalid or saturated and prints out for either case:</p> <p>Flicker Detection is Invalid <pre><code>if (fdValid == false)\n    {\n        Serial.print(\"Flicker Detection Measurement Invalid\");\n        Serial.println();\n        delay(1000);\n        return;\n    }\n</code></pre> Flicker Detection Saturated <pre><code>    if (fdSaturation == true)\n    {\n        Serial.print(\"Flicker Detection Saturation Detected\");\n        Serial.println();\n        delay(1000);\n        return;\n    }\n</code></pre></p> <p>If the flicker detection value is valid and not saturated, it reads the value and prints it in Hz over serial:</p> <pre><code>    if(fdValid == true &amp;&amp; fdSaturation == false)\n    {\n        if (fdFrequency == 0) // if getFlickerDetectionFrequency() returns 0, no frequency detected\n            Serial.print(\"No Flicker Detected\");\n        else\n        {\n            Serial.print(\"Flicker Detected at frequency: \");\n            Serial.print(fdFrequency);\n            Serial.print(\"Hz\");\n        }\n        Serial.println();\n    }\n\n    delay(1000);\n</code></pre>"},{"location":"arduino_examples/#example-6-sleep","title":"Example 6 - Sleep","text":"<p>Example six shows how to put the AS734 in and out of \"sleep\" to take intermittent measurements. Note, the AS7343 datasheet refers to each mode of operation as Sleep, Idle and Active. There is no direct control of a power mode but we can turn off the Measurement and the Power ON bits in the Enable register to put the AS7343 into a low power state that draws ~350uA. This example creates helper functions to wake the sensor, take a reading and then put the sensor back to sleep once every five seconds in the main loop:</p> <pre><code>void loop()\n{\n    takeReading(); // Wake up and take a reading from the sensor\n\n    sleepSensor(); // Disables measurement (IDLE) and powers off (SLEEP)\n\n    delay(5000); // Wait 5 seconds to allow reading sleep current if needed.\n}\n</code></pre>"},{"location":"arduino_examples/#example-7-web-terminal-bar-graph","title":"Example 7 - Web Terminal Bar Graph","text":"<p>The seventh example takes data from all of the AS7343's channels (visible spectrum, NIR and clear) and formats it in a way to work with the SparkFun Web Serial Plotter tool to display the readings in a colorful bar graph. After uploading the code, open the SparkFun Web Serial Plotter site, select the COM port with the baud set to 115200 and click connect. You should start to see serial data print out in the top window along with a bar graph matching the channel data in the bottom window:</p> <p></p>"},{"location":"arduino_setup/","title":"AS7343 Arduino Library Setup","text":"<p>Arduino</p> <p>This example assumes you are using the latest version of the Arduino IDE on your desktop. If this is your first time using Arduino IDE, library, or board add-on, please readh through the following tutorials:</p> <ul> <li>Installing the Arduino IDE</li> <li>Installing an Arduino Library</li> <li>Installing Board Definitions in the Arduino IDE</li> </ul> <p>The SparkFun AS7343 Arduino Library helps users get started with the AS7343 with seven examples that go through how to use different features of the AS7343. The library is built around the SparkFun Arduino Toolkit and requires installation of both libraries to work. Install the libraries using the Arduino library manager by opening the tool and searching for \"SparkFun Toolkit\" and \"SparkFun AS7343\" and installing the latest releases of both libraries. Users who prefer to manually install the libraries can download ZIP files of them here: SparkFun Toolkit (ZIP) and SparkFun AS7343 Arduino Library (ZIP).</p>"},{"location":"hardware_assembly/","title":"Hardware Assembly","text":"<p>Now that we're familiar with the hardware on this Qwiic breakout, let's build it into a Qwiic circuit to start getting spectral data from the AS7343.</p>"},{"location":"hardware_assembly/#qwiic-assembly","title":"Qwiic Assembly","text":"<p>The Qwiic system allows solderless connections for power and I<sup>2</sup>C so all you need to get up and running is a Qwiic cable and Qwiic compatible development board (or a Qwiic adapter cable). Assemble your Qwiic circuit by connecting the Spectral Sensor Breakout - AS7343 to your development board with the Qwiic cable and then connecting the development board to your computer over USB like the photo below shows:</p> <p></p>"},{"location":"hardware_assembly/#using-an-external-led","title":"Using an External LED","text":"<p>If you'd like to install your own LED on the breakout board you'll need to disable the on-board LED and solder in your chosen replacement. Start by opening the \"WLED\" solder jumper and then solder the new LED to the pads with the diode symbol (labeled USER on the reverse of the board). Make sure to match the LED's polarity to the diode symbol like the photo below shows:</p> <p></p>"},{"location":"hardware_assembly/#soldered-assembly","title":"Soldered Assembly","text":"<p>Users who prefer a soldered connection or need to use the AS7343's Interrupt and/or GPIO pins in a permanent assembly should solder to the 0.1\"-spaced PTH header on the board. We opted to solder straight headers to this PTH header for prototyping the circuits for the Interrupt and GPIO code examples further along in this guide. </p>"},{"location":"hardware_overview/","title":"Hardware Overview","text":"<p>Let's take a closer look at the AS7343 and other hardware on the SparkFun Spectral Sensor Breakout - AS7343. The image below highlights the major components on this Qwiic breakout board:</p> <p></p>"},{"location":"hardware_overview/#as7343-spectral-sensor","title":"AS7343 Spectral Sensor","text":"<p>The AS7343 from AMS<sup>\u2122</sup> measures irradiated, reflected and transmitted light in both the visible spectrum and near-infrared (NIR). The sensor features 14 channels in a 5x5 photodiode array, enabling the detection of 11 specific color bands across the visible spectrum. Additionally, dedicated photodiodes on the outer edges of this array are designed for near-infrared (845-865 nm) and flicker detection. It has exceptional sensitivity for measuring reflected, emitted and transmitted light even in low-light environments and also behind tinted glass. </p>"},{"location":"hardware_overview/#power","title":"Power","text":"<p>Power for the board can be supplied either over one of the Qwiic connectors or through the 3.3V pin. The AS7343 accepts a supply voltage between 1.7V and 2V so the breakout includes an on board voltage regulator to drop the 3.3V supplied over Qwiic or 3.3V pin to 1.8V. This regulator has a max input voltage of 5.5V.</p>"},{"location":"hardware_overview/#qwiic-pinout","title":"Qwiic &amp; Pinout","text":"<p>The AS7343 communicates over I<sup>2</sup>C and has an active low/high interrupt pin as well as a GPIO pin. The breakout routes the SDA/SCL lines from the AS7343 to a pair of Qwiic connectors as well as the 0.1\"-spaced PTH header on the side of the board. The AS7343's interrupt and GPIO are also routed to this PTH.</p>"},{"location":"hardware_overview/#leds","title":"LEDs","text":"<p>The Spectral Sensor Breakout - AS7343 has two LEDs on the board labeled PWR and WLED. The red Power (PWR) LED indicates when the board is powered. The white (WLED) LED connects to the AS7343's LED current sink pin to illuminate objects/areas during sensor readings. Users can disable the on board white LED by opening the corresponding solder jumper and connect their own LED to the PTH pins labeled .</p>"},{"location":"hardware_overview/#solder-jumpers","title":"Solder Jumpers","text":"<p>The board has three solder jumpers labeled I2C, PWR and WLED. The I2C jumper is a three-way jumper that pulls the SDA/SCL lines to 3.3V through a pair of 2.2k\u03a9 resistors and is CLOSED by default. The board also includes level shifting to drop the logic down to 1.8V . The PWR jumper completes the power LED circuit and is CLOSED by default. Open the solder jumper to disable the power LED. The WLED jumper completes the white LED circuit and is CLOSED by default.</p>"},{"location":"hardware_overview/#board-dimensions","title":"Board Dimensions","text":"<p>The SparkFun Spectral Sensor Breakout - AS7343 matches the Qwiic breakout standard and measures 1\" x 1\" (22.5mm x 22.5mm) and has four mounting holes that fit a 4-40 screw.</p> <p></p>"},{"location":"introduction/","title":"Introduction","text":"<p>The SparkFun Spectral Sensor Breakout - AS7343 (Qwiic) offers a highly accurate but compact spectral analysis tool for both the visible spectrum and near-infrared. The AS7343 senses light between ~380mn to 1000mn over 14 channels with 11 color bands across the visible spectrum, one near-infrared channel, one clear channel (full sensing spectrum) along with flicker detection. The AS7343 also has an interrupt pin to trigger events based on specific measurements from the sensor as well as a programmable GPIO pin to help synchronize measurements with external devices. This breakout comes standard with a bright white LED for taking measurements but also includes connection points for users who wish to use their own LED if needed.</p> <p>This guide covers how to get spectral data from the AS7343 using both Arduino and MicroPython when connecting the Spectral Sensor Breakout to a compatible development board over Qwiic. In order to follow along with this guide you'll need the Spectral Sensor Breakout - AS7343 along with the following materials:</p> <ul> <li>SparkFun IoT RedBoard - ESP32 MicroPython Development Board (or other Arduino/MicroPython development board)</li> <li>Qwiic Cable</li> <li>USB-C Cable </li> </ul> <p>If you plan to use the AS7343's Interrupt/GPIO pins or prefer a soldered connection, you may need one or more of these materials along with a soldering iron and solder:</p> <ul> <li>Breakaway Headers Straight</li> <li>Jumper Wires - Connected 6\" (M/M, 20 pack)</li> <li>Breadboard</li> </ul>"},{"location":"introduction/#topics-covered","title":"Topics Covered","text":"<p>This document contains three main sections: Quickstart Guide, Hardware and Software. </p> <p>The Quickstart Guide assumes a working knowledge of how to use a development board and the required software to program them for your project's needs. It covers a quick assembly and then jumps right into getting the necessary software packages installed to start getting spectral data in just a few short minutes.</p> <p>The Hardware pages are split into the Hardware Overview and Hardware Assembly. The Hardware Overview provides a detailed overview of the Spectral Sensor Breakout - AS7343 along with all the major components included on the board. Refer to this page for information on things like the AS7343, LEDs, pinout and solder jumpers. The Hardware Assembly page covers how to assemble the breakout in both a Qwiic circuit as well as how to use the optional soldered features such as the external LED and the AS7343's Interrupt/GPIO pins.</p> <p>The Software pages are split into sections covering the SparkFun AS7343 Arduino Library and MicroPython driver. Each software page gives instructions on how to download install the software package (Arduino library or MicroPython driver), as well as detailed looks at the examples included in the software packages.</p>"},{"location":"introduction/#resources-and-support-documentation","title":"Resources and Support Documentation","text":"<p>You'll find the board design files (KiCad files &amp; schematic), relevant documentation (datasheets, white papers, etc.) and other helpful links in the Resources. Lastly, the Support section includes a Troubleshooting page that includes any helpful tips specific to this board as well as information on how to receive technical support from SparkFun.</p>"},{"location":"micropython_examples/","title":"Python Examples","text":"<p>Let's take a quick look at each example included in the SparkFun AS7343 Python package. Note, the naming of these examples matches the examples in the Arduino library and skips from 3 to 5 as this package does not have an interrupt example (Example 4 in the Arduino library).</p>"},{"location":"micropython_examples/#example-1-basic-readings","title":"Example 1 - Basic Readings","text":"<p>This simple example demonstrates how to set up the AS7343 with default settings and though it does set the AS7343 to report data from all 18 channels it only prints data for four channels (Red, Green, Blue and NIR) using this command:</p> <pre><code>    print(myAS7343.get_blue(), end=',')\n        print(myAS7343.get_red(), end=',')\n        print(myAS7343.get_green(), end=',')\n        print(myAS7343.get_nir(), end=',\\n')\n</code></pre>"},{"location":"micropython_examples/#example-2-all-channels","title":"Example 2 - All Channels","text":"<p>Example 2 demonstrates how to set up the AS7343 to output data from all channels on the sensor in comma-separated values by steping through all channels:</p> <pre><code>    for i in range(0, myAS7343.kNumChannels):\n            print(myAS7343.get_data(i), end=',')\n        print()\n</code></pre>"},{"location":"micropython_examples/#example-3-gain","title":"Example 3 - Gain","text":"<p>The third example shows how to set the gain for the AS7343. It defaults to set the gain as <code>512x</code> but you can adjust it in this line:</p> <pre><code>if not myAS7343.set_a_gain(myAS7343.kAgain64):\n</code></pre> <p>Refer to the main .py file here for all allowed values for gain settings.</p>"},{"location":"micropython_examples/#example-5-flicker-detection","title":"Example 5 - Flicker Detection","text":"<p>The Flicker Detection example demonstrates how to use the AS7343's flicker detection feature. It initializes the sensor with default settings and then prints out flicker detection vlues in Hz to the serial monitor:</p> <pre><code>if fdFrequency == 0:\n            print(\"No flicker detected\")\n        else:\n            print(\"Flicker detected at frequency: {} Hz\".format(fdFrequency))\n\n        time.sleep(1)\n</code></pre>"},{"location":"micropython_examples/#example-6-sleep","title":"Example 6 - Sleep","text":"<p>The sixth example shows how to create a <code>def</code> to cycle the AS7343 in and out of \"sleep\" between measurement reports to help conserve power:</p> <pre><code>def sleep_device(device):\n    # Disable spectral measurements\n    if not device.spectral_measurement_disable():\n        print(\"Failed to disable spectral measurements\", file=sys.stderr)\n        return\n    print(\"Spectral measurements disabled\")\n\n    # Power off the device\n    if not device.power_off():\n        print(\"Failed to power off the device\", file=sys.stderr)\n        return\n    print(\"Device powered off\")\n</code></pre> <p>The main example then initializes the sensor with default settings, takes readings, puts it to sleep for 5 seconds and then loops:</p> <pre><code>    while True:\n        # Take a reading\n        take_reading(myAS7343)\n\n        # Put the device to sleep\n        sleep_device(myAS7343)\n\n        # Wait 5 seconds before taking another reading\n        time.sleep(5.0)\n</code></pre> <p>Though there is no direct control of a power mode, the example turns off the measurement and Power ON bits in the Enable register to put the sensor into a low power state so it draws ~350\u00b5A.</p>"},{"location":"micropython_examples/#example-7-web-bar-graph","title":"Example 7 - Web Bar Graph","text":"<p>Example 7 shows how to use the Spectral Sensor with the SparkFun Web Serial Plotter to display spectral data from all channels in a neat and colorful bar graph. You'll need to run this on a microcontroller like the IoT RedBoard - ESP32 MicroPython as the Web Serial Plotter connects over a serial COM port. The code initializes the AS7343 with default settings and then prints out the comma-separated values in a format compatible with the web serial plotter:</p> <pre><code>print(f\"{myAS7343.get_data(myAS7343.kChPurpleF1405nm)},\"\n          f\"{myAS7343.get_data(myAS7343.kChDarkBlueF2425nm)},\"\n          f\"{myAS7343.get_data(myAS7343.kChBlueFz450nm)},\"\n          f\"{myAS7343.get_data(myAS7343.kChLightBlueF3475nm)},\"\n          f\"{myAS7343.get_data(myAS7343.kChBlueF4515nm)},\"\n          f\"{myAS7343.get_data(myAS7343.kChGreenF5550nm)},\"\n          f\"{myAS7343.get_data(myAS7343.kChGreenFy555nm)},\"\n          f\"{myAS7343.get_data(myAS7343.kChOrangeFxl600nm)},\"\n          f\"{myAS7343.get_data(myAS7343.kChBrownF6640nm)},\"\n          f\"{myAS7343.get_data(myAS7343.kChRedF7690nm)},\"\n          f\"{myAS7343.get_data(myAS7343.kChDarkRedF8745nm)},\"\n          f\"{myAS7343.get_data(myAS7343.kChVis1)},\"\n          f\"{myAS7343.get_data(myAS7343.kChNir855nm)}\\n\", end='')\n</code></pre> <p>After running the example, open the Web Serial Plotter and select the COM port and click \"Connect\" and you should see serial data print out in the top window and a nice colorful bar graph in the bottom window like the gif below shows:</p> <p></p>"},{"location":"micropython_setup/","title":"AS7343 Python Package Setup","text":"<p>The SparkFun AS7343 Python Package is based off the Arduino library for the sensor to get users started with example code for the AS7343. It works for Python, MicroPython and CircuitPython so you can choose which \"flavor\" of Python to use. This section goes over how to install the package in each supported Python environment along with the necessary tools for installation and running examples.</p>"},{"location":"micropython_setup/#python-installation","title":"Python Installation","text":"<p>For users on a Linux-based system (Raspberry Pi, etc.), install this package in Python with PyPi using the <code>pip3</code> command with the following steps:</p> <ul> <li>Set up a virtual environment from a specific directory using <code>venv</code>: `python3 -m venv path/to/venv (You can use any path here just remember to use the same one for each step).</li> <li>Install the Qwiic package: `path/to/venv/bin/pip3 install sparkfun-qwiic-as7343</li> </ul> <p>That's it. Now you can run any example (or your own custom scripts) by running it with a command like: <code>path/to/venv/bin/python3 qwiic_as7343_ex1_basic_readings.py</code></p>"},{"location":"micropython_setup/#micropython-installation","title":"MicroPython Installation","text":"<p>If you prefer to use MicroPython to run the examples on a microcontroller running MicroPython, follow these steps to install the package on your computer:</p> <ul> <li>Install mpremote on your computer.</li> <li>Connect the IoT RedBoard - ESP32 (or other MicroPython device) to your computer and install the package directly using mpremote mip: <code>mpremote mip install github:sparkfun/qwiic_as7343_py</code></li> <li>Install the examples to the IoT RedBoard with the following mip command: <code>mpremote mip install github:sparkfun/qwiic_as7343_py@examples</code></li> </ul>"},{"location":"micropython_setup/#circuitpython-installation","title":"CircuitPython Installation","text":"<p>Lastly, users who prefer CircuitPython can install the package with the following steps:</p> <ul> <li>Install CircUp on your computer.</li> <li>Make sure you have the latest version of the SparkFun Qwiic CircuitPython module installed with this command: <code>circup bundle-add sparkfun/Qwiic_py</code></li> <li>Connect your CircuitPython device to your computer and install the package to the divice with circup: <code>circup install --py qwiic_as7343</code></li> </ul> <p>If you want to install specific examples from the repository, use the following command:</p> <p><code>circup example qwiic_as7343\\qwiic_as7343_ex1_basic_readings circup example qwiic_as7343\\qwiic_as7343_ex2_all_channels circup example qwiic_as7343\\qwiic_as7343_ex3_gain circup example qwiic_as7343\\qwiic_as7343_ex5_flicker_detection circup example qwiic_as7343\\qwiic_as7343_ex6_sleep</code></p> <p>Note, the syntax used here are for Windows commands; Linux and Mac have different path separators. Refer to the CircUp \"example command documentation for more information.</p>"},{"location":"quickstart/","title":"Quick Start","text":"<p>In this Quick Start Guide we'll connect the SparkFun Spectral Sensor Breaout - AS7343 (Qwiic) to an IoT RedBoard - ESP32 to output measurements of visible and near-infrared light and display them in a colorful web terminal bar graph.</p> <p>If you're not familiar with using sensor breakouts, development boards or the development environments covered in this guide, refer to the Hardware &amp; Arduino Setup sections of this Hookup Guide for a detailed overview of the board along with instructions on setting up and using the SparkFun AS7343 Arduino Library. For those who prefer to run this example in MicroPython, read on to the AS7343 Python Setup and Python Examples sections of this guide.</p>"},{"location":"quickstart/#basic-assembly","title":"Basic Assembly","text":"<p>As this is a Qwiic breakout, assembling the circuit only requires connecting the sensor breakout to a Qwiic-compatible development board like the IoT RedBoard - ESP32. Connect the Spectral Sensor Breakout to the IoT RedBoard with a Qwiic cable and then connect the IoT RedBoard to your computer with a USB-C cable like the photo below demonstrates:</p> <p></p>"},{"location":"quickstart/#arduino-web-terminal-bar-graph-example","title":"Arduino Web Terminal Bar Graph Example","text":"<p>The Arduino Web Terminal Bar Graph example sets up the AS7343 to output from all channels and format the data to work with the SparkFun Web Serial Plotter tool and display it in a bar graph. The Web Terminal Bar Graph site only works in a Chromium-based browser (sorry, no Firefox) and just requires a serial connection over USB to your microcontroller.</p> <ul> <li>Open the Arduino IDE</li> <li>Open the Library Manager tool and search for \"SparkFun Toolkit\" and \"SparkFun AS7343\" and install the latest versions of both libraries.</li> <li>If necessary, open the Boards Manager and search for \"ESP32\" to install the IoT RedBoard - ESP32 board definition.</li> <li>Open \"Example 7 - Web Terminal Bar Graphs\" from the SparkFun AS7343 Arduino Library and select your board (IoT RedBoard - ESP32) and Port.</li> <li>Click the \"Upload\" button and wait for the code to finish compiling and uploading.</li> <li>Open this link in a browser and select the COM port of the IoT RedBoard.</li> <li>Try moving the Spectral Sensor around and pointing it at different objects/colors and watch the Bar Graph in the bottom half of the window update every 1s like the gif below.</li> </ul> <p></p> <p>Code to Note</p> <p>The code begins by setting the AS7343 to operate with default settings and prints out whether or not it fails or begins:</p> <pre><code>    if (mySensor.begin() == false)\n    {\n        Serial.println(\"Sensor failed to begin. Please check your wiring!\");\n        Serial.println(\"Halting...\");\n        while (1)\n            ;\n    }\n\n    Serial.println(\"Sensor began.\")\n</code></pre> <p>After initializing the sensor and powering it on, the code then sets the AS7343's AutoSmux to output all 18 channels and prints out the result:</p> <pre><code>    if (mySensor.setAutoSmux(AUTOSMUX_18_CHANNELS) == false)\n    {\n        Serial.println(\"Failed to set AutoSmux.\");\n        Serial.println(\"Halting...\");\n        while (1)\n            ;\n    }\n    Serial.println(\"AutoSmux set to 18 channels.\");\n</code></pre> <p>The main loop turns the white LED on to illuminate the sensing area and then takes a reading from all channels once per second:</p> <pre><code>    mySensor.ledOn();\n    delay(100);\n\n    // Read all data registers\n    // if it fails, print a failure message and continue\n    if (mySensor.readSpectraDataFromSensor() == false)\n    {\n        Serial.println(\"Failed to read spectral data.\");\n    }\n</code></pre> <p>Finally, in order to format the data for the web serial terminal, the code fills the buffer with channel data in a specific order and prints the buffer for the web terminal to output the bar graph data correctly:</p> <pre><code>    sprintf(buffer, \"%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\\n\",\n           mySensor.getChannelData(CH_PURPLE_F1_405NM),\n           mySensor.getChannelData(CH_DARK_BLUE_F2_425NM),\n           mySensor.getChannelData(CH_BLUE_FZ_450NM),\n           mySensor.getChannelData(CH_LIGHT_BLUE_F3_475NM),\n           mySensor.getChannelData(CH_BLUE_F4_515NM),\n           mySensor.getChannelData(CH_GREEN_F5_550NM),\n           mySensor.getChannelData(CH_GREEN_FY_555NM),\n           mySensor.getChannelData(CH_ORANGE_FXL_600NM),\n           mySensor.getChannelData(CH_BROWN_F6_640NM),\n           mySensor.getChannelData(CH_RED_F7_690NM),\n           mySensor.getChannelData(CH_DARK_RED_F8_745NM),\n           mySensor.getChannelData(CH_VIS_1),\n           mySensor.getChannelData(CH_NIR_855NM));\n\n    Serial.print(buffer);\n</code></pre>"},{"location":"resources/","title":"Resources","text":"<p>Refer to the resources below for more information on the SparkFun Spectral Sensor Breakout - AS7343 (Qwiic)</p> <ul> <li>Schematic</li> <li>KiCad Files</li> <li>Board Dimensions</li> <li>Datasheet (AS7343)</li> <li>SparkFun AS7343 Arduino Library</li> <li>SparkFun AS7343 Python Package</li> <li>GitHub Repository</li> </ul>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#power-consumption-tips","title":"Power Consumption Tips","text":"<p>The AS7343 boasts some impressively low power consumption numbers but the breakout board includes a few extra components that increase the total draw of the breakout. In our testing, the red Power LED is the biggest culprit and disabling it reduces total current consumption by roughly 300\u00b5A. For example, opening the LED jumper to disable the LED drops current while idle from ~320\u00b5A down to ~3\u00b5A. </p> <p>Also, the on-board white LED defaults to draw 4mA from the AS7343's LED Drive pin while active so we recommend turning it on only when needed for spectral sensing. This is the lowest setting for the LED drive pin and can be adjusted to up to 12mA in both the Arduino library and Python package. Refer to the AS7343 datasheet for more information on driving an external LED.</p>"},{"location":"troubleshooting/#general-troubleshooting","title":"General Troubleshooting","text":"<p>Info</p> <p><p> Not working as expected and need help? </p> <p>If you need technical assistance and more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting.</p> SparkFun Technical Assistance Page <p>If you can't find what you need there, you'll need a Forum Account to search product forums and post questions.<p></p>"},{"location":"github/contribute/","title":"Contribute: Make an Augmentation!","text":"<p>Spot an improvement opportunity? Feel free to contribute to our open-source design and documentation. </p>"},{"location":"github/contribute/#improve-our-documentation","title":"Improve our Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>These pages are contained in the <code>docs</code> folder of the SparkFun Spectral Sensor Breakout - AS7343 (Qwiic) repository.</li> </ul>"},{"location":"github/contribute/#submit-a-correction","title":"Submit a Correction","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your corrections or improvements to the markdown file.</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvements to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/contribute/#improve-our-hardware-design","title":"Improve our Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the Spectral_Sensor_Breakout_AS7343_Qwiic repository.</li> </ul>"},{"location":"github/contribute/#submit-a-design-enhancement","title":"Submit a Design Enhancement","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your design augmentation(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ol> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s) to verify that they are within our board design standards and meet our product design requirements.</li> <li> <p>If approved, we will flag these changes for our next board revision. Congrats! \ud83c\udf7b</p> <p>Info</p> <p>Even if your suggestion is accepted, these changes may not be immediately available for purchase. We may have to cycle through our current product inventory first.</p> </li> </ol> </li> </ol>"},{"location":"github/contribute/#contributors","title":"Contributors","text":"<p>Let's provide some recognition to the contributors for this project!</p> <p> </p>"},{"location":"github/file_issue/","title":"Did we make a mistake?","text":"<p>Spot something wrong? Please let us know. </p>"},{"location":"github/file_issue/#discrepancies-in-the-documentation","title":"Discrepancies in the Documentation","text":"<p>All of our documentation can be modified by you! Please help us make it better.</p> <ul> <li>The documentation files for these pages are contained in the <code>docs</code> folder of the Spectral Sensor Breakout - AS7343 (Qwiic) repository.</li> </ul>"},{"location":"github/file_issue/#spot-something-wrong","title":"\ud83d\udd0d Spot something wrong?","text":"<p>If a section of the documentation is incorrect, please open an issue and let us know.</p>"},{"location":"github/file_issue/#do-you-have-a-suggested-correction","title":"Do you have a suggested correction?","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your correction(s) or improvement(s) to the markdown file(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvement(s) to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/file_issue/#problems-in-the-hardware-design","title":"Problems in the Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the Spectral Sensor Breakout - AS7343 (Qwiic) repository.</li> </ul>"},{"location":"github/file_issue/#does-something-not-make-sense","title":"Does something not make sense? \ud83e\udd14","text":"<p>If part of the design is confusing, please open an issue and let us know.</p>"},{"location":"github/file_issue/#did-we-forget-to-include-an-important-function-of-the-board","title":"Did we forget to include an important function of the board? \ud83e\udd26","text":"<p>If part of the board's functionality is missing, please open an issue and file a feature request.</p> <p>Design Considerations</p> <p>Please keep in mind that we may intentionally exclude certain functions of the board to meet our product design requirements.</p> <ul> <li>For example, our Qwiic Micro boards are intended to fit on a small board layout and only use I<sup>2</sup>C communication; therefore, we may not have the SPI and interrupt pins available for users.</li> </ul>"},{"location":"github/file_issue/#do-you-wish-to-contribute-directly-to-improving-the-board-design","title":"Do you wish to contribute directly to improving the board design?","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your design augmentation(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ol> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s) to verify that they are within our board design standards and meet our product design requirements.</li> <li> <p>If approved, we will flag these changes for our next board revision. Congrats! \ud83c\udf7b</p> <p>Info</p> <p>Even if your suggestion is accepted, these changes may not be immediately available for purchase. We may have to cycle through our current product inventory first.</p> </li> </ol> </li> </ol>"},{"location":"javascript/","title":"javascript directory","text":"<p>This folder should contain the files for the custom javascript that is enabled in the product documentation</p>"},{"location":"stylesheet/REAMDE/","title":"stylesheet directory","text":"<p>This folder should contain the files used for the webpage customizations of the product documentation</p>"}]}